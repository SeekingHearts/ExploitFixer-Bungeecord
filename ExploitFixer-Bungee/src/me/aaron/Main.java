package me.aaron;

import com.google.common.base.Charsets;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.Connection;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PlayerDisconnectEvent;
import net.md_5.bungee.api.event.PluginMessageEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.config.Configuration;
import net.md_5.bungee.config.ConfigurationProvider;
import net.md_5.bungee.config.YamlConfiguration;
import net.md_5.bungee.event.EventHandler;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class Main extends Plugin implements Listener {

	private static final Map<Connection, Long> PACKET_USAGE = new ConcurrentHashMap<>();
	private static final Map<Connection, AtomicInteger> CHANNELS_REGISTERED = new ConcurrentHashMap<>();

	private String dispatchCommand, kickMessage;

	@Override
	public void onEnable() {
		Configuration config;

		try {
			config = loadConfig();
		} catch (IOException e) {
			config = null;
		}

		if (config == null) {
			getLogger().severe("Fehler beim Laden der Config...");
			return;
		}
		dispatchCommand = config.getString("dispatchCommand");
		kickMessage = config.getString("kickMessage");

		getProxy().getPluginManager().registerListener(this, this);
	}

	private boolean elapsed(long from, long till) {
		return from == -1L || System.currentTimeMillis() - from > till;
	}

	@EventHandler
	public void onPacket(final PluginMessageEvent e) {
		String name = e.getTag();
		if (!name.equals("MC|BSign") && !name.equals("MC|BEdit") && !name.equals("REGISTER"))
			return;

		Connection con = e.getSender();
		if (!(con instanceof ProxiedPlayer))
			return;

		try {
			if (name.equals("REGISTER")) {
				if (!CHANNELS_REGISTERED.containsKey(con))
					CHANNELS_REGISTERED.put(con, new AtomicInteger());

				for (int i = 0; i < new String(e.getData(), Charsets.UTF_8).split("\0").length; i++) {
					if (CHANNELS_REGISTERED.get(con).incrementAndGet() > 124)
						throw new IOException("Zu viele Verbindungen");
				}
			} else {
				if (elapsed(PACKET_USAGE.getOrDefault(con, -1L), 100L)) {
					PACKET_USAGE.put(con, System.currentTimeMillis());
				} else {
					throw new IOException("Paket Überlauf");
				}
			}
		} catch (final Throwable ex) {
			con.disconnect(TextComponent.fromLegacyText(kickMessage));

			if (dispatchCommand != null)
				getProxy().getPluginManager().dispatchCommand(getProxy().getConsole(),
						dispatchCommand.replace("%player%", ((ProxiedPlayer) con).getName()));
			getLogger().warning(con.getAddress()
					+ " hat versucht mithilfe des CustomPayload Exploit den Server zu crashen: " + ex.getMessage());
			e.setCancelled(true);
		}
	}

	@EventHandler
	public void onDisconnect(final PlayerDisconnectEvent e) {
		CHANNELS_REGISTERED.remove(e.getPlayer());
		PACKET_USAGE.remove(e.getPlayer());
	}

	private Configuration loadConfig() throws IOException {
        if (!getDataFolder().exists())
            getDataFolder().mkdir();

        File file = new File(getDataFolder(), "config.yml");
        if (!file.exists()) {
            try (InputStream in = getResourceAsStream("config.yml")) {
                Files.copy(in, file.toPath());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return ConfigurationProvider.getProvider(YamlConfiguration.class).load(file);
    }

}
